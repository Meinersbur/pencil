/*
 * Copyright (c) 2013-2014, ARM Limited
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/* Simple PENCIL code for doing a low-rank approximation to a correlation between a block,
 * define as the sum of weighted products of horizontal and vertical masks, and an image.
 */

/* Notes
 * -----
 * Applying the kind of manual optimizations (in the programmer's mind)
 * I'd use if I was trying to write optimized code but in C by hand.
 */

const float MINUS_INFTY=-1e37; // value smaller than any encountered correlation score


/* do a 1-D correlation along the second dimension */
static
void sndDimCorrelate(int noMasks,int maskLen,int fstDim,int sndDim,float mask[noMasks][maskLen],
                     float results[noMasks][fstDim][sndDim],float img[fstDim][sndDim]) {
    for(int fst=0;fst<fstDim;++fst){ //#
        for(int snd=0;snd<sndDim-maskLen;++snd){ //#
          for (int p = 0; p < noMasks; p++){
                float accum = 0;
                for(int l = 0; l < maskLen; l++){
                    accum = accum + mask[p][l] * img[fst][snd+l];
                }
                results[p][fst][snd] = accum;
            }
        }
    }
}

/* do a 1-D correlation along the first dimension */
static
void fstDimCorrelateAcc(int noMasks,int maskLen,int fstDim,int sndDim,float mask[noMasks][maskLen],
                        float results[fstDim][sndDim],float img[fstDim][sndDim],float weights[noMasks]) {
    for(int snd=0;snd<sndDim;++snd){ //#
        for(int fst=0;fst<fstDim-maskLen;++fst){ //#
            float accum2 = 0;
            for(int p = 0; p < noMasks; p++)
              {
                float accum = 0;
                for(int l = 0; l < maskLen; l++){
                    accum = accum + mask[p][l] * img[fst+l][snd];
                }
                accum2 = accum2 + weights[p] * accum;
            }
            results[fst][snd] = results[fst][snd] + accum2;
        }
    }
}

static
void correlationLowRankApprox(int noMasks,int maskLen,int fstDim,int sndDim,
                                  float accumulators[fstDim][sndDim],float img[fstDim][sndDim],float masks[2][noMasks][maskLen],
                                  float weights[noMasks][noMasks]) {
    /* actually compute the weight for a low-rank approximation */
    float imgStack[noMasks][fstDim][sndDim];
    sndDimCorrelate(noMasks,maskLen,fstDim,sndDim,masks[0],imgStack,img);
    /* fill output array with zeroes; might be better to use library function */
    for(int fst=0;fst<fstDim;++fst){ //#
        for(int snd=0;snd<sndDim;++snd){ //#
            accumulators[fst][snd]=0;
        }
    }
    for(int j=0;j<noMasks;++j){
        fstDimCorrelateAcc(noMasks,maskLen,fstDim,sndDim,masks[1],accumulators,imgStack[j],weights[j]);
    }
    /* result is now in the accumulators array */
}

/* arrays scores and positions hold the biggest noResults responses and get passed back to "user code"
 * see note at top of file */
void highestCorrelationPointsOpt(int noResults,int noMasks,int maskLen,int fstDim,int sndDim,
                              float scores[noResults],int positions[noResults][2],float img[fstDim][sndDim],
                              float masks[2][noMasks][maskLen],float weights[noMasks][noMasks]) {
    /* initialise scores with values guaranteed smaller than all genuine values; library function */
    for(int i=0;i<noResults;++i){
        scores[i]=MINUS_INFTY;
    }
    /* compute response scores over the image */
    float accumulators[fstDim][sndDim];
    correlationLowRankApprox(noMasks,maskLen,fstDim,sndDim,accumulators,img,masks,weights);
    /* find the top noResults ones in the array */
    for(int fst=maskLen;fst<fstDim-maskLen;++fst){ //#
        for(int snd=maskLen;snd<sndDim-maskLen;++snd){ //#
            /* find a position in the list to insert this at, if any */
            float value=accumulators[fst][snd];
            int pos=noResults-1;
            while(pos>=0 && scores[pos]<value){
                pos=pos-1;
            }
            /* pos now indexes the first score entry bigger than value, so move down one */
            pos=pos+1;
            if(pos<noResults){
                /* move the "smaller than" portion of the list down one slot */
                for(int k=noResults;k>pos;--k){
                    positions[k][0]=positions[k-1][0];
                    positions[k][1]=positions[k-1][1];
                    scores[k]=scores[k-1];
                }
                /* insert new values into the vacated slot */
                positions[pos][0]=fst;
                positions[pos][1]=snd;
                scores[pos]=value;
            }
        }
    }
}
