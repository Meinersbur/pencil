/*
 * Copyright (c) 2013-2014, ARM Limited
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

struct ComplexDouble{
  double Re;
  double Im;
};

double noop(double in) {
  return in;
}

/* all {@assert {noop(1.0) == 1.0}} */
/* all {@assert {noop(2.0) == 2.0}} */

void copy(struct ComplexDouble in, struct ComplexDouble out[1]) {
  out[0] = in;
}

void simplecopy(struct ComplexDouble in, struct ComplexDouble out[1]) {
  struct ComplexDouble v;
  v = in;
  out[0] = v;
}

double fieldreturn(struct ComplexDouble par) {
  struct ComplexDouble v;
  v.Re = par.Re;
  v.Im = par.Im;
  return v.Re+v.Im;
}

double otherstmts(struct ComplexDouble par) {
  struct ComplexDouble v;
  v.Re = par.Re;
  v.Im = par.Im;
  if (v.Re < 0.0) {
    v.Re = noop(v.Re);
  }
  return v.Re+v.Im;
}

double localarray(struct ComplexDouble par) {
  struct ComplexDouble v[2];
  v[0].Re = -(par.Re);
  v[1].Im = -(par.Im);
  return v[0].Re+v[1].Im;
}

struct ComplexDouble structreturn(struct ComplexDouble par) {
  struct ComplexDouble v;
  v.Re = -(par.Re);
  v.Im = -(par.Im);
  return v;
}

struct ComplexDouble structreturnindirect(struct ComplexDouble par) {
  struct ComplexDouble v;
  struct ComplexDouble w;
  v.Re = -(par.Re);
  v.Im = -(par.Im);
  w = v;
  return w;
}

void doubleasg(struct ComplexDouble par, struct ComplexDouble out[1]) {
  struct ComplexDouble v;
  v.Re = par.Re * par.Im;
  v.Re = par.Re + par.Im;
  out[0] = v;
}

void structcall(struct ComplexDouble par, struct ComplexDouble out[static restrict 1]) {
  struct ComplexDouble v;
  v = structreturn(par);
  v.Re = v.Re + 1.1;
  out[0] = v;
}
