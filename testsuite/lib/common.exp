# Copyright (c) 2013-2014, ARM Limited
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

proc mark_error_test {} {
    if {$::tool_name == "linker"} {
        set ::expect_linker_error true
    }
    set ::should_compile false
    set ::should_run false
}

proc do_link-error {} {
    mark_error_test
}

proc do_error {} {
    mark_error_test
    dict set ::expected_errors $::line False
}

proc do_link-with {file} {
    set dir [file dirname $::input_filename]
    lappend ::additional_files "$dir/$file"
}

proc do_static-link-with {file} {
    set dir [file dirname $::input_filename]
    lappend ::additional_files "--static"
    lappend ::additional_files "$dir/$file"
}

proc do_assert {cond} {
    add_code "assert($cond);"
}

proc do_require-option {option} {
    lappend ::additional_option "$option"
}

proc add_code {code} {
    if { $::should_compile } {
        set ::should_run true
    }
    set ::additional_code "$::additional_code\n$code"
}

proc do_check {pattern} {
    puts $::check_file $pattern
    set ::should_check true
}


proc clean {} {
  file delete "$::output_filename"
}

proc run_tool {} {
  set success 0
  set error 255

  set expected $success

  if {[dict size $::expected_errors] > 0 || $::expect_linker_error} {
    set expected $error
  }

  spawn "./pencil-$::tool_name" -o "$::output_filename" "$::input_filename" {*}$::additional_option {*}$::additional_files --include "${::objdir}/code/pencil_pre.h"

  # Collect all output
  set lines {}
  expect {
    ERROR {
      fail "$::input_filename: error: $expect_out(buffer)"
    }

    -re {..*} {
      append lines $expect_out(buffer)
      exp_continue
    }

    timeout {
      unresolved "$::input_filename: timeout"
    }
  }

  # Compare tool output with list of expected errors
  set correct True
  set linelist [regexp -all -inline {(code.*?) line (\d+):} $lines]
  foreach {pattern file line} $linelist {
    if { ! [dict exists $::expected_errors $line] } {
      fail "$file: Compiler output (unexpected error on line $line)"
      set correct False
    } else {
      dict set ::expected_errors $line True
    }
  }

  set linkerrors [regexp -all -inline {Linker error:(.*)} $lines]
  if {($linkerrors == {}) && ! $::expect_linker_error ||
      ($linkerrors != {}) && $::expect_linker_error } {
      if {$::tool_name == "linker"} {
          pass "${::input_filename}: Link test"
      }
  } else {
      fail "${::input_filename}: Link test"
  }

  dict for {line flag} $::expected_errors {
      if { ! $flag } {
          fail "$::input_filename: Compiler output (expected error on line $line was not reported)"
          set correct False
      }
    }
  if {$correct} {
    pass "$::input_filename: Compiler output"
  }

  catch wait result
  set code [lindex $result 3]
  if {$code != $expected} {
    fail "$::input_filename: Exit code ($code)"
  } else {
    pass "$::input_filename: Exit code"
  }
}

proc analyze {} {
  set fp [open "$::input_filename"]
  set data [split [read "$fp"] "\n"]
  close $fp
  set ::line 1

  foreach line $data {
    if {[regexp ".*/\\* *($::tool_name|all) *\\{(@?)(.*)\\} *\\*/.*" $line match tool flag command]} {
        if { [string length $flag] != 0 } {
            eval "do_$command"
        } else {
            add_code "$command"
        }
    }
    incr ::line
  }
}

proc compile_c_weak {} {
  spawn gcc -w -std=c99 -include "${::objdir}/code/carp-common.h" "$::output_filename" -c -o /dev/null
  catch wait result
  set code [lindex $result 3]
  if {$code != 0} {
    fail "$::input_filename: Weak C Compilation"
  } else {
    pass "$::input_filename: Weak C Compilation"
  }
}

proc prepare {} {
    set input_basename [file tail $::input_filename]
    set testoutdir "${::objdir}/code/pencil/simple"
    set ::output_filename "${testoutdir}/${input_basename}.${::tool_name}.c"
    set ::check_filename "${testoutdir}/${input_basename}.${::tool_name}.check"
    set ::binary "${testoutdir}/${input_basename}.${::tool_name}.run"
    set ::check_file [open $::check_filename w]
    set ::should_compile true
    set ::expect_linker_error false
    set ::should_check false
    set ::should_run false
    set ::additional_option [list]
    set ::additional_files [list]
    set ::expected_errors [dict create]
    set ::additional_code ""
    clean
}

proc prepare_for_compilation {} {
    set fo [open $::output_filename a]
    puts $fo "int main(){"
    puts $fo $::additional_code
    puts $fo "  return 0;"
    puts $fo "}"
    close $fo
}


proc compile_c {} {
    prepare_for_compilation
    spawn gcc -w -std=c99 -include "${::objdir}/code/carp-common.h" "${::output_filename}" -o "${::binary}" -lm
    catch wait result
    set code [lindex $result 3]
    if {$code != 0} {
        fail "${::input_filename}: C Compilation"
    } else {
        pass "${::input_filename}: C Compilation"
    }
}

proc run_binary {} {
  spawn "${::binary}"
  catch wait result
  set code [lindex $result 3]
  if {$code != 0} {
    fail "${::input_filename}: Execution"
  } else {
    pass "${::input_filename}: Execution"
  }

}


proc execute {} {
    if { ! $::should_compile &&  ! $::should_run } {
        return
    }
    if { $::should_compile &&  ! $::should_run } {
        if { ! [file exists $::output_filename ] } {
            untested "$::input_filename: Weak C Compilation"
            return
        }
        compile_c_weak
        return
    }
    if { ! [file exists $::output_filename ] } {
        untested "$::input_filename: C Compilation"
        return
    }
    compile_c
    if { ! $::should_run } {
        return
    }
    if { ! [file exists $::binary ] } {
        untested "$::input_filename: Execution"
        return
    }
    run_binary
}

proc check {} {
    close $::check_file
    if { ! $::should_check } {
        return
    }
    if {[info exists ::env(FILE_CHECK_TOOL)] && $::env(FILE_CHECK_TOOL) != "" } {
        spawn $::env(FILE_CHECK_TOOL) -input-file=$::output_filename $::check_filename
        catch wait result
        set code [lindex $result 3]
        if {$code != 0} {
            fail "${::input_filename}: Check"
        } else {
            pass "${::input_filename}: Check"
        }
    } else {
        untested "${::input_filename}: Check"
    }
}

proc check_file_for_linking {name} {
  set fp [open "$::input_filename"]
  set data [split [read "$fp"] "\n"]
  close $fp
  foreach line $data {
    if {[regexp ".*/\\* *($::tool_name|all) *\\{(@?)(.*)\\} *\\*/.*" $line match tool flag command]} {
        if { [string length $flag] != 0 } {
            if {[string match error* "$command"]} {
                return false
            }
        } else {
            add_code "$command"
        }
    }
  }
  return true
}

proc analyze_linked {} {
    foreach input $::additional_files {
        if {! [check_file_for_linking $input] } {
            unresolved "${::input_filename}: Linkage with ${name}"
            return false
        }
    }
    return true
}

proc walk_file {} {
    prepare
    analyze
    if {! [analyze_linked] } {
        return
    }
    run_tool
    check
    execute
}

proc test_tool {tool filename} {
  set ::input_filename "$filename"
  set ::tool_name "$tool"
  walk_file
}
