From baff3257d710e3b209d0c8b62c77405fd9f8177a Mon Sep 17 00:00:00 2001
From: Sven van Haastregt <sven.vanhaastregt@arm.com>
Date: Wed, 16 Jul 2014 10:26:53 +0100
Subject: [PATCH] Use PENCIL runtime functions

---
 opencl.c | 136 ++++++++++++++++++---------------------------------------------
 1 file changed, 38 insertions(+), 98 deletions(-)

diff --git a/opencl.c b/opencl.c
index 3f0e872..ad4fafc 100644
--- a/opencl.c
+++ b/opencl.c
@@ -30,8 +30,7 @@
  *	if not specified by the user.
  * kernel_c_name is the name of the kernel_c file.
  * host_c is the generated source file for the host code.  kernel_c is
- * the generated source file for the kernel.  kernel_h is the generated
- * header file for the kernel.
+ * the generated source file for the kernel.
  */
 struct opencl_info {
 	struct ppcg_options *options;
@@ -41,7 +40,6 @@ struct opencl_info {
 
 	FILE *host_c;
 	FILE *kernel_c;
-	FILE *kernel_h;
 };
 
 /* Open the file called "name" for writing or print an error message.
@@ -89,27 +87,19 @@ static int opencl_open_files(struct opencl_info *info)
 	strcpy(info->kernel_c_name + len, "_kernel.cl");
 	info->kernel_c = open_or_croak(info->kernel_c_name);
 
-	strcpy(name + len, "_kernel.h");
-	info->kernel_h = open_or_croak(name);
-
 	if (!info->host_c || !info->kernel_c || !info->host_c)
 		return -1;
 
 	fprintf(info->host_c, "#include <assert.h>\n");
 	fprintf(info->host_c, "#include <stdio.h>\n");
-	fprintf(info->host_c, "#include \"%s\"\n\n", ppcg_base_name(name));
-	fprintf(info->kernel_h, "#if defined(__APPLE__)\n");
-	fprintf(info->kernel_h, "#include <OpenCL/opencl.h>\n");
-	fprintf(info->kernel_h, "#else\n");
-	fprintf(info->kernel_h, "#include <CL/opencl.h>\n");
-	fprintf(info->kernel_h, "#endif\n\n");
-	fprintf(info->kernel_h, "cl_device_id opencl_create_device("
-				"int use_gpu);\n");
-	fprintf(info->kernel_h, "cl_program opencl_build_program("
-				"cl_context ctx, "
-				"cl_device_id dev, const char *filename, "
-				"const char *opencl_options);\n");
-	fprintf(info->kernel_h,
+	fprintf(info->host_c, "#include <pencil_runtime.h>\n");
+	fprintf(info->host_c, "#include <opencl/pencil_int.h>\n");
+	fprintf(info->host_c, "#if defined(__APPLE__)\n");
+	fprintf(info->host_c, "#include <OpenCL/opencl.h>\n");
+	fprintf(info->host_c, "#else\n");
+	fprintf(info->host_c, "#include <CL/opencl.h>\n");
+	fprintf(info->host_c, "#endif\n\n");
+	fprintf(info->host_c,
 		"const char *opencl_error_string(cl_int error);\n");
 	for (i = 0; i < info->options->opencl_n_include_file; ++i)
 		fprintf(info->kernel_c, "#include <%s>\n",
@@ -124,8 +114,6 @@ static void opencl_close_files(struct opencl_info *info)
 {
 	if (info->kernel_c)
 		fclose(info->kernel_c);
-	if (info->kernel_h)
-		fclose(info->kernel_h);
 	if (info->host_c)
 		fclose(info->host_c);
 }
@@ -158,7 +146,7 @@ static __isl_give isl_printer *opencl_declare_device_arrays(
 		if (gpu_array_is_read_only_scalar(&prog->array[i]))
 			continue;
 		p = isl_printer_start_line(p);
-		p = isl_printer_print_str(p, "cl_mem dev_");
+		p = isl_printer_print_str(p, "pencil_cl_mem dev_");
 		p = isl_printer_print_str(p, prog->array[i].name);
 		p = isl_printer_print_str(p, ";");
 		p = isl_printer_end_line(p);
@@ -198,7 +186,7 @@ static __isl_give isl_printer *allocate_device_array(__isl_take isl_printer *p,
 	p = isl_printer_start_line(p);
 	p = isl_printer_print_str(p, "dev_");
 	p = isl_printer_print_str(p, array->name);
-	p = isl_printer_print_str(p, " = clCreateBuffer(context, ");
+	p = isl_printer_print_str(p, " = opencl_create_device_buffer(");
 	p = isl_printer_print_str(p, "CL_MEM_READ_WRITE");
 
 	if (!copy)
@@ -226,10 +214,7 @@ static __isl_give isl_printer *allocate_device_array(__isl_take isl_printer *p,
 		p = isl_printer_print_str(p, array->name);
 	}
 
-	p = isl_printer_print_str(p, ", &err);");
-	p = isl_printer_end_line(p);
-	p = isl_printer_start_line(p);
-	p = isl_printer_print_str(p, "openclCheckReturn(err);");
+	p = isl_printer_print_str(p, ");");
 	p = isl_printer_end_line(p);
 
 	p = ppcg_end_block(p);
@@ -279,7 +264,7 @@ static __isl_give isl_printer *opencl_set_kernel_argument(
 {
 	p = isl_printer_start_line(p);
 	p = isl_printer_print_str(p,
-		"openclCheckReturn(clSetKernelArg(kernel");
+		"opencl_set_kernel_arg(kernel");
 	p = isl_printer_print_int(p, kernel_id);
 	p = isl_printer_print_str(p, ", ");
 	p = isl_printer_print_int(p, arg_index);
@@ -289,10 +274,15 @@ static __isl_give isl_printer *opencl_set_kernel_argument(
 		p = isl_printer_print_str(p, arg_name);
 		p = isl_printer_print_str(p, "), &");
 	} else
-		p = isl_printer_print_str(p, "cl_mem), (void *) &dev_");
+		p = isl_printer_print_str(p, "pencil_cl_mem), (void *) &dev_");
 
 	p = isl_printer_print_str(p, arg_name);
-	p = isl_printer_print_str(p, "));");
+	if (read_only_scalar) {
+		p = isl_printer_print_str(p, ", 0");
+	} else {
+		p = isl_printer_print_str(p, ", 1");
+	}
+	p = isl_printer_print_str(p, ");");
 	p = isl_printer_end_line(p);
 
 	return p;
@@ -837,21 +827,18 @@ static __isl_give isl_printer *opencl_print_host_user(
 	p = isl_printer_end_line(p);
 
 	p = isl_printer_start_line(p);
-	p = isl_printer_print_str(p, "cl_kernel kernel");
+	p = isl_printer_print_str(p, "pencil_cl_kernel kernel");
 	p = isl_printer_print_int(p, kernel->id);
-	p = isl_printer_print_str(p, " = clCreateKernel(program, \"kernel");
+	p = isl_printer_print_str(p, " = opencl_create_kernel(program, \"kernel");
 	p = isl_printer_print_int(p, kernel->id);
-	p = isl_printer_print_str(p, "\", &err);");
-	p = isl_printer_end_line(p);
-	p = isl_printer_start_line(p);
-	p = isl_printer_print_str(p, "openclCheckReturn(err);");
+	p = isl_printer_print_str(p, "\");");
 	p = isl_printer_end_line(p);
 
 	opencl_set_kernel_arguments(p, data->prog, kernel);
 
 	p = isl_printer_start_line(p);
-	p = isl_printer_print_str(p, "openclCheckReturn(clEnqueueNDRangeKernel"
-		"(queue, kernel");
+	p = isl_printer_print_str(p, "opencl_launch_kernel"
+		"(kernel");
 	p = isl_printer_print_int(p, kernel->id);
 	p = isl_printer_print_str(p, ", ");
 	if (kernel->n_block > 0)
@@ -860,18 +847,16 @@ static __isl_give isl_printer *opencl_print_host_user(
 		p = isl_printer_print_int(p, 1);
 
 	p = isl_printer_print_str(p, ", NULL, global_work_size, "
-					"block_size, "
-					"0, NULL, NULL));");
+							  "block_size);");
 	p = isl_printer_end_line(p);
 	p = isl_printer_start_line(p);
-	p = isl_printer_print_str(p, "openclCheckReturn("
-					"clReleaseKernel(kernel");
+	p = isl_printer_print_str(p, "opencl_release_kernel(kernel");
 	p = isl_printer_print_int(p, kernel->id);
-	p = isl_printer_print_str(p, "));");
+	p = isl_printer_print_str(p, ");");
 	p = isl_printer_end_line(p);
 	p = isl_printer_start_line(p);
-	p = isl_printer_print_str(p, "clFinish(queue);");
-	p = isl_printer_end_line(p);
+	/*p = isl_printer_print_str(p, "clFinish(opencl_get_command_queue());");*/
+	/*p = isl_printer_end_line(p);*/
 	p = isl_printer_indent(p, -2);
 	p = isl_printer_start_line(p);
 	p = isl_printer_print_str(p, "}");
@@ -913,11 +898,9 @@ static __isl_give isl_printer *copy_array_from_device(__isl_take isl_printer *p,
 	struct gpu_array_info *array = user;
 
 	p = isl_printer_start_line(p);
-	p = isl_printer_print_str(p, "openclCheckReturn("
-					"clEnqueueReadBuffer(queue,"
-					" dev_");
+	p = isl_printer_print_str(p, "opencl_copy_to_host(dev_");
 	p = isl_printer_print_str(p, array->name);
-	p = isl_printer_print_str(p, ", CL_TRUE, 0, ");
+	p = isl_printer_print_str(p, ", ");
 	p = gpu_array_info_print_size(p, array);
 
 	if (gpu_array_is_scalar(array))
@@ -925,7 +908,7 @@ static __isl_give isl_printer *copy_array_from_device(__isl_take isl_printer *p,
 	else
 		p = isl_printer_print_str(p, ", ");
 	p = isl_printer_print_str(p, array->name);
-	p = isl_printer_print_str(p, ", 0, NULL, NULL));");
+	p = isl_printer_print_str(p, ");");
 	p = isl_printer_end_line(p);
 
 	return p;
@@ -976,43 +959,10 @@ static __isl_give isl_printer *opencl_setup(__isl_take isl_printer *p,
 	int len;
 
 	p = isl_printer_start_line(p);
-	p = isl_printer_print_str(p, "cl_device_id device;");
-	p = isl_printer_end_line(p);
-	p = isl_printer_start_line(p);
-	p = isl_printer_print_str(p, "cl_context context;");
-	p = isl_printer_end_line(p);
-	p = isl_printer_start_line(p);
-	p = isl_printer_print_str(p, "cl_program program;");
-	p = isl_printer_end_line(p);
-	p = isl_printer_start_line(p);
-	p = isl_printer_print_str(p, "cl_command_queue queue;");
-	p = isl_printer_end_line(p);
-	p = isl_printer_start_line(p);
-	p = isl_printer_print_str(p, "cl_int err;");
-	p = isl_printer_end_line(p);
-	p = isl_printer_start_line(p);
-	p = isl_printer_print_str(p, "device = opencl_create_device(");
-	p = isl_printer_print_int(p, info->options->opencl_use_gpu);
-	p = isl_printer_print_str(p, ");");
-	p = isl_printer_end_line(p);
-	p = isl_printer_start_line(p);
-	p = isl_printer_print_str(p, "context = clCreateContext(NULL, 1, "
-		"&device, NULL, NULL, &err);");
-	p = isl_printer_end_line(p);
-	p = isl_printer_start_line(p);
-	p = isl_printer_print_str(p, "openclCheckReturn(err);");
+	p = isl_printer_print_str(p, "pencil_init();");
 	p = isl_printer_end_line(p);
 	p = isl_printer_start_line(p);
-	p = isl_printer_print_str(p, "queue = clCreateCommandQueue"
-					"(context, device, 0, &err);");
-	p = isl_printer_end_line(p);
-	p = isl_printer_start_line(p);
-	p = isl_printer_print_str(p, "openclCheckReturn(err);");
-	p = isl_printer_end_line(p);
-
-	p = isl_printer_start_line(p);
-	p = isl_printer_print_str(p, "program = opencl_build_program("
-					"context, device, \"");
+	p = isl_printer_print_str(p, "pencil_cl_program program = opencl_create_program(\"");
 	p = isl_printer_print_str(p, info->kernel_c_name);
 	p = isl_printer_print_str(p, "\", \"");
 
@@ -1032,16 +982,7 @@ static __isl_give isl_printer *opencl_release_cl_objects(
 	__isl_take isl_printer *p, struct opencl_info *info)
 {
 	p = isl_printer_start_line(p);
-	p = isl_printer_print_str(p, "openclCheckReturn(clReleaseCommandQueue"
-					"(queue));");
-	p = isl_printer_end_line(p);
-	p = isl_printer_start_line(p);
-	p = isl_printer_print_str(p, "openclCheckReturn(clReleaseProgram"
-					"(program));");
-	p = isl_printer_end_line(p);
-	p = isl_printer_start_line(p);
-	p = isl_printer_print_str(p, "openclCheckReturn(clReleaseContext"
-					"(context));");
+	p = isl_printer_print_str(p, "pencil_shutdown();");
 	p = isl_printer_end_line(p);
 
 	return p;
@@ -1053,10 +994,9 @@ static __isl_give isl_printer *release_device_array(__isl_take isl_printer *p,
 	struct gpu_array_info *array)
 {
 	p = isl_printer_start_line(p);
-	p = isl_printer_print_str(p, "openclCheckReturn("
-					"clReleaseMemObject(dev_");
+	p = isl_printer_print_str(p, "opencl_release_buffer(dev_");
 	p = isl_printer_print_str(p, array->name);
-	p = isl_printer_print_str(p, "));");
+	p = isl_printer_print_str(p, ");");
 	p = isl_printer_end_line(p);
 
 	return p;
-- 
2.0.0

