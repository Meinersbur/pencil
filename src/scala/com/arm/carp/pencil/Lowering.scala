/*
 * Copyright (c) 2013-2014, ARM Limited
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package com.arm.carp.pencil

/**
  * Lower raw PENCIL variables, generated by front-ends, to references.
  *
  * While the PENCIL IR requires all use of the variable to be represented as unique
  * xxxxVariableRef object, front-ends are allowed to generate raw ScalarVariable/
  * ArrayVariable objects.
  */
object Lowering extends Walker {

  val config = WalkerConfig.expressions

  override def walkScalarVariableInt(in: ScalarVariable) = (new ScalarVariableRef(in.base), None)

  private def updateArrayRanges(in: ArrayType): Unit = {
    in.range = walkScalarExpression(in.range)._1
    in.base match {
      case _:ScalarType =>
      case arr: ArrayType => updateArrayRanges(arr)
    }
  }

  override def walkArrayVariableInt(in: ArrayVariable) = {
    updateArrayRanges(in.base.expType)
    (new ArrayVariableRef(in.base), None)
  }
}
